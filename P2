package Project2;

import java.util.PriorityQueue;

public class P2 {
    public static int mergeLists(int[] jatin) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int size : jatin) {
            minHeap.add(size);
        }
        int totalCost = 0;

        while (minHeap.size() > 1) {
            int first = minHeap.poll();
            int second = minHeap.poll();
            int mergeCost = first + second;
            totalCost += mergeCost;
            minHeap.add(mergeCost);
        }
        return totalCost;
    }
    public static void main(String[] args) {

        int[][] testCases = {
                {4, 3, 2, 6},           // n = 4,
                {4, 3, 2, 6, 7, 9},     // n = 6,
                {1, 3, 7, 8, 10, 12, 14}, // n = 7,
                {1, 2, 3, 5, 7, 11, 13, 17},  // n = 8,
                {1, 2, 3, 4, 5, 6, 7, 8, 9}, // n = 9,
                
        };

        for (int[] listSizes : testCases) {
            long startTime = System.nanoTime();
            int result = mergeLists(listSizes);
            long endTime = System.nanoTime();
            long duration = endTime - startTime;
            System.out.println("Input size: " + listSizes.length + ", Time taken: " + duration + " ns, Result: " + result);
        }
    }
}
